# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Workflow to register the DESCARTES Course with the UMH DESCARTES Course Sites page.
name: Register Descartes Course Site

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "descartes"
  cancel-in-progress: false

jobs:
  # Deployment job
  deploy:
    environment:
      name: descartes-course
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          path: current-repo
      
      - name: Remote Descartes Course repository
        uses: actions/checkout@v4
        with:
          repository: uhm-descartes/descartes-modules
          token: ${{ secrets.DESCARTES_TOKEN }}"
          path: descartes-modules

      - name: Update CSV and Create Pull Request
        env:
          COURSE_URL: ${{ steps.deployment.outputs.page_url }}
          COURSE_REPOSITORY: ${{ github.repository }}
          DESCARTES_TOKEN: ${{ secrets.DESCARTES_TOKEN }}
          DESCARTES_COURSES: "descartes-modules"
          DESCARTES_REPOSITORY: "https://github.com/uhm-descartes/descartes-modules.git"
          CSV_FILE: "course-sites/descartes-courses.csv"
        run: |
          # Extract course name, course full name, and description from _config.yml
          if [ -f "current-repo/_config.yml" ]; then
            COURSE_NAME=$(grep "^morea_course:" current-repo/_config.yml | sed 's/morea_course: *//' | tr -d '"' | tr '[:lower:]' '[:upper:]')
            COURSE_FULL_NAME=$(grep "^morea_course_name:" current-repo/_config.yml | sed 's/morea_course_name: *//' | tr -d '"')
            COURSE_DESCRIPTION=$(grep "^morea_description:" current-repo/_config.yml | sed 's/morea_description: *//' | tr -d '"')
            COURSE_PREREQUISITES=$(grep "^morea_course_prerequisites:" current-repo/_config.yml | sed 's/morea_course_prerequisites: *//' | tr -d '"')
            echo "Found course name: $COURSE_NAME"
            echo "Found course full name: $COURSE_FULL_NAME"
            echo "Found course description: $COURSE_DESCRIPTION"
            echo "Found course prerequisites: $COURSE_PREREQUISITES"
            
            # Escape commas in full name and description for CSV format
            COURSE_FULL_NAME=$(echo "$COURSE_FULL_NAME" | sed 's/,/;/g')
            COURSE_DESCRIPTION=$(echo "$COURSE_DESCRIPTION" | sed 's/,/;/g')
            COURSE_PREREQUISITES=$(echo "$COURSE_PREREQUISITES" | sed 's/,/;/g')
          else
            echo "ERROR: _config.yml not found!"
            exit 1
          fi
          
          # Debug: Check if token is available
          if [ -z "$DESCARTES_TOKEN" ]; then
            echo "ERROR: DESCARTES_TOKEN secret is not set!"
            exit 1
          fi
          
          # Configure git with token authentication
          git config user.name "UHM DESCARTES Action Bot"
          git config user.email "uhmnrt@hawaii.edu"
          
          # Verify remote URL
          echo "Current remote URL:"
          if git remote add -f $DESCARTES_COURSES $DESCARTES_REPOSITORY; then
            echo "Added Remote and Fetched $DESCARTES_COURSES repository"
          else
            git fetch $DESCARTES_COURSES
            echo "Fetched $DESCARTES_COURSES repository"
          fi

          cd $DESCARTES_COURSES
          
          # Check if the exact entry already exists (with full name and description)
          EXPECTED_ENTRY="$COURSE_NAME,$COURSE_URL,$COURSE_FULL_NAME,$COURSE_DESCRIPTION,$COURSE_PREREQUISITES,$COURSE_REPOSITORY"
          if grep -Fxq "$EXPECTED_ENTRY" "$CSV_FILE"; then
            echo "Entry '$EXPECTED_ENTRY' already exists in CSV file. Skipping update."
            exit 0
          fi
          
          # Check if an entry with same course name and URL exists (but potentially different full name or description or prerequisites or repository)
          PARTIAL_ENTRY="$COURSE_NAME,$COURSE_URL"
          if grep -q "^$PARTIAL_ENTRY," "$CSV_FILE"; then
            echo "Found entry with same course and URL but different full name/description/prerequisites/repository. Will update entry."
            NEEDS_UPDATE=true
          elif grep -q "^$COURSE_NAME," "$CSV_FILE"; then
            echo "Found entry with same course name but different URL/full name/description/prerequisites/repository. Will update entry."
            NEEDS_UPDATE=true
          else
            echo "No existing entry found. Will add new entry."
            NEEDS_UPDATE=true
          fi
          
          # Create a new branch
          BRANCH_NAME="update-${COURSE_NAME// /}-$(date +%s)"
          git checkout -b "$BRANCH_NAME"
          
          if grep -q "^$COURSE_NAME," "$CSV_FILE"; then
            # Update existing entry with full name and description
            sed -i.bak "s|^$COURSE_NAME,.*|$EXPECTED_ENTRY|g" "$CSV_FILE"
            echo "Updated existing $COURSE_NAME entry with: $COURSE_URL, full name: $COURSE_FULL_NAME, and description: $COURSE_DESCRIPTION"
          else
            # Append new entry with full name and description
            echo "$EXPECTED_ENTRY" >> "$CSV_FILE"
            echo "Added new $COURSE_NAME entry with: $COURSE_URL, full name: $COURSE_FULL_NAME, and description: $COURSE_DESCRIPTION"
          fi
          
          # Check if there are changes
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # Commit and push changes
          git add "$CSV_FILE"
          git commit -m "Update $COURSE_NAME deploy URL, full name, and description: $COURSE_URL"
          git push origin "$BRANCH_NAME"
          
          # Create pull request using GitHub CLI
          gh pr create \
            --title "Update $COURSE_NAME deploy URL, full name, and description" \
            --body "Automatically generated PR to update $COURSE_NAME course site URL to: $COURSE_URL with full name: $COURSE_FULL_NAME and description: $COURSE_DESCRIPTION" \
            --head "$BRANCH_NAME" \
            --base main
